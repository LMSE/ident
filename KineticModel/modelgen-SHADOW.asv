function [model_data,parameter,variable,nt_rxn,nt_metab,bm_ind] = modelgen(rxfname)
%Generate Metabolic Network Model from Stoichiometric Reactions in the
%Metabolic Network

%Shyam 2014
fileid = fopen(rxfname);
if fileid == -1
    fprintf('File %s cannot be opened.', rxfname);
    model_data = struct([]);
    parameter = struct([]);
    variable = struct([]);
    return;
end

C = textscan(fileid, '%s%f%f%f%f%f%f%s%s%s%s%s%s%s%f%f',...
                     'Delimiter', '\t',...
                     'TreatAsEmpty', {'None'},...
                     'HeaderLines', 1);
fclose(fileid);

model_data = struct();
%Enzyme/Reaction Information 
model.EnzName = C{1};%Enzyme Name
model.EC = C{2};     %Etotal Concentration
model.Kcat = C{3};   %Reaction kcat 
model.Vmax = C{4};   %Vmax
%model.Vss = C{7};
model_data.nt_rxn = length(C{8});
%model.RxnMech = C{11};
nt_rxn = model_data.nt_rxn;
model.S = sparse(0,nt_rxn);
model.K = sparse(0,nt_rxn);
Keq = zeros(nt_rxn,1);
model.delG = zeros(nt_rxn,1);
model.Vss = zeros(nt_rxn,1);
model.Metabolite = {};


imetab = 1;
for irxn = 1:nt_rxn
    ipt = 0; 
    %Vsteady state
    if ~isempty(C{7}(irxn)) && ~isnan(C{7}(irxn))
        model.Vss(irxn) = C{7}(irxn);
    else
        %run FBA after building model
        %runFBA = true;
        model.Vss(irxn) = 1;
    end
    
    %Keq if available else use delG
    if ~isempty(C{5}(irxn)) && ~isnan(C{5}(irxn))        
        Keq(irxn) = C{5}(irxn);
    elseif ~isempty(C{6}(irxn)) && ~isnan(C{6}(irxn))
        Keq(irxn) = exp(-C{6}(irxn)/(0.008314*298.15));%delG = -RTlnKeq
        model.delG(irxn) = C{6}(irxn);
    else
        Keq(irxn) = 0;
%         model.delG(irxn) = 0;
    end       
    
    %Building S and K matrices
    rxnstring = C{8}{irxn};  
    %separate terms into a vector
    [par] = extract_par(C{12}{irxn});    
    
    if ~isempty(strfind(rxnstring, '<==>'))
		eqsym = '<==>';
		%reverse = 1;
    elseif ~isempty(strfind(rxnstring, '-->'))
		eqsym = '--->';
		%reverse = 0;
    elseif ~isempty(strfind(rxnstring, '->'))
		eqsym = '->';
		%reverse = 0;
    elseif ~isempty(strfind(rxnstring, '='))
		eqsym = '=';
		%reverse = 1;
    end    

    k = strfind(rxnstring, ':');
    if ~isempty(k)
        %compartment = rxnstring(1:(k - 2));
        rxnstring = rxnstring((k + 1):end);
    else
        %compartment = '';
    end
     
    k = strfind(rxnstring, eqsym);
    lhs = rxnstring(1:k - 1);
    if ~isempty(lhs)
        terms = strtrim(textscan(lhs, '%s', 'Delimiter', '+'));
        s = regexp(terms{1}, '[(]?([0-9.]+)[)]? ([A-Za-z0-9_\-\[\]]+)', 'tokens');  
        %Assign default parameters here if isempty(par) == 1
        if isempty(par)
            %call function to assign default parameters for lhs
            par = defparval(length(s));
        end

        for iterm = 1:length(s)
            if ~isempty(s{iterm})
                stoich = str2double(s{iterm}{1}{1});
                metab = s{iterm}{1}{2};
            else
                stoich = 1;
                metab = terms{1}{iterm};
            end
            
            %metab = strcat(metab, compartment);%Required for
            %compartmentalized models
            tf = strcmp(metab, model.Metabolite);
            if any(tf)
                model.S(tf, irxn) = -stoich;
                if ~isempty(par)
                    model.K(tf,irxn) = par(ipt+iterm);
                end
            else
                model.S(imetab, irxn) = -stoich;
                model.Metabolite{imetab} = metab;
                if ~isempty(par)
                    model.K(imetab,irxn) = par(ipt+iterm);
                end
                imetab = imetab + 1;
            end
        end
        ipt = ipt + iterm;
    end
    
    rhs = rxnstring((k + length(eqsym)):end);
    if ~isempty(rhs)
        terms = strtrim(textscan(rhs, '%s', 'Delimiter', '+'));
        s = regexp(terms{1},'[(]?([0-9.]+)[)]? ([A-Za-z0-9_\-\[\]]+)','tokens');
        if length(par) < ipt + length(s) 
            %-> assign default parameters for rhs
            par = defparval(length(s),par);
        end
        for iterm = 1:length(s)
            if ~isempty(s{iterm})
                stoich = str2double(s{iterm}{1}{1});
                metab = s{iterm}{1}{2};
            else
                stoich = 1;
                metab = terms{1}{iterm};
            end
            
            %metab = strcat(metab, compartment);
            tf = strcmp(metab, model.Metabolite);
            if any(tf)
                model.S(tf, irxn) = stoich;
                if ~isempty(par)
                    model.K(tf,irxn) = par(ipt+iterm);
                end
            else
                model.S(imetab, irxn) = stoich;
                model.Metabolite{imetab} = metab;
                if ~isempty(par)
                    model.K(imetab,irxn) = par(ipt+iterm);
                end
                imetab = imetab + 1;
            end
        end
        ipt = ipt + iterm;
    end   
end

model.Metabolite = model.Metabolite';
model.nt_metab = size(model.S, 1);
nt_metab = model.nt_metab;

model.SI = sparse(nt_metab,nt_rxn);%Regulatory S matrix
model.SItype = sparse(nt_metab,nt_rxn);%Regulation type
model.KI = sparse(nt_metab,nt_rxn);

% Selecting activators/inhibitors and building SI and KI
for irxn = 1:nt_rxn
    par = extract_par(C{13}{irxn});%Acquire parameters as vectors
    ireg = 0;   
    
    actstring = strtrim(strrep(C{9}{irxn},'"',''));%Activators    
    if ~isempty(actstring)         
        [model] = ident_regulator(model,actstring,1);%Activators        
    end
    
    inhstring = strtrim(strrep(C{10}{irxn},'"',''));%Inhibitors
    if ~isempty(inhstring)  
        %->Assign default parameters for inhibitors if par = [] or 
        %if length(par) < length(activators) + length(inhibitors)
        %par = defparval(nterms,par)
        [model] = ident_regulator(model,inhstring,-1);%Inhibitors        
    end
end

%Separate External & Internal Metabolites
exter_mind = ~cellfun('isempty',regexp(model.Metabolite,'\w(?:xt)$'));
inter_mind = ~exter_mind;
bm_mind = ~cellfun('isempty',regexp(model.Metabolite,'Biomass'));
inter_mind(bm_mind)=0;

model_data.Metabolite = [model.Metabolite(inter_mind,1);model.Metabolite(exter_mind,1);model.Metabolite(bm_mind,1)];
newS = [model.S(inter_mind,:);model.S(exter_mind,:);model.S(bm_mind,:)];
newSI = [model.SI(inter_mind,:);model.SI(exter_mind,:);model.SI(bm_mind,:)];
newK = [model.K(inter_mind,:);model.K(exter_mind,:);model.K(bm_mind,:)];
newKI = [model.KI(inter_mind,:);model.KI(exter_mind,:);model.KI(bm_mind,:)];

nexter_metab = length(find(exter_mind));
ninter_metab = length(find(inter_mind));

%External-Internal relationship
exter_metab = model.Metabolite(exter_mind,1);
rowind = zeros(nexter_metab,1);
colind = zeros(nexter_metab,1);
% M = sparse(nexter_metab,ninter_metab);
for iex_metab = 1:nexter_metab
    ex_metab = regexp(exter_metab{iex_metab},'(\w+?)(?:xt)$','tokens');
    if ~isempty(ex_metab)
        tf_exterm = strcmpi(ex_metab{1},model.Metabolite(1:ninter_metab));
        if any(tf_exterm)
            rowind(iex_metab) = iex_metab;
            colind(iex_metab) = find(tf_exterm);            
        end
    end
end
model_data.M = sparse(rowind,colind,1,nexter_metab,ninter_metab);
nt_metab = nt_metab-1;

%Identify Exchange Reactions
%Intracellular
[~,allrxns] = find(newS(1:ninter_metab,1:nt_rxn)~=0);
all_unqrxns = unique(allrxns);
nmetab_allrxns = histc(allrxns,all_unqrxns);
ex_rxns = all_unqrxns(nmetab_allrxns == 1);
[~,rxn_ind1] = find(newS(:,ex_rxns)>0);
V1in_ind = ex_rxns(rxn_ind1);
[~,rxn_ind2] = find(newS(:,ex_rxns)<0);
V1out_ind = ex_rxns(rxn_ind2);
Vic_exind = [V1in_ind;V1out_ind];
nint_exrxn = length(Vic_exind);
%Extracellular
[~,allrxns] = find(newS(ninter_metab+1:nt_metab,1:nt_rxn)~=0);
all_unqrxns = unique(allrxns);
nmetab_allrxns = histc(allrxns,all_unqrxns);
ex_rxns = all_unqrxns(nmetab_allrxns == 1);
[~,rxn_ind1] = find(newS(:,ex_rxns)>0);
V2in_ind = ex_rxns(rxn_ind1);
[~,rxn_ind2] = find(newS(:,ex_rxns)<0);
V2out_ind = ex_rxns(rxn_ind2);
Vxc_exind = [V2in_ind;V2out_ind];
next_exrxn = length(Vxc_exind);

V_ind = setdiff(1:nt_rxn,[Vic_exind;Vxc_exind]);
n_rxn = nt_rxn - nint_exrxn - next_exrxn;

%Identify biomass reaction
[~,bm_ind] = find(model.S(strcmpi(model.Metabolite,'Biomass'),:) > 0);
if ~isempty(bm_ind)
    V_ind = V_ind(V_ind ~= bm_ind);
    Vic_exind =Vic_exind(Vic_exind ~= bm_ind);
    Vxc_exind = Vxc_exind(Vxc_exind ~= bm_ind);
end
n_rxn = n_rxn-1;
%Rearrange S [intracellular,ex_in,ex_out,biomass]
newS = [newS(:,V_ind),newS(:,Vic_exind),newS(:,Vxc_exind),newS(:,bm_ind)];
newSI = [newSI(:,V_ind),newSI(:,Vic_exind),newSI(:,Vxc_exind),newSI(:,bm_ind)];
newK = [newK(:,V_ind),newK(:,Vic_exind),newK(:,Vxc_exind),newK(:,bm_ind)];
newKI = [newKI(:,V_ind),newKI(:,Vic_exind),newKI(:,Vxc_exind),newKI(:,bm_ind)];
newVss = [model.Vss(V_ind,1);model.Vss(Vic_exind,1);model.Vss(Vxc_exind,1);model.Vss(bm_ind,1)];
delSGr = [model.delG(V_ind,1);model.delG(Vic_exind,1);model.delG(Vxc_exind,1);model.delG(bm_ind,1)];
newKeq = [Keq(V_ind,1);Keq(Vic_exind,1);Keq(Vxc_exind,1);Keq(bm_ind,1)];

%Identify activated reactions
[allactmetab,allactrxn] = find(model.SI(:,1:nt_rxn)>0);
Vact_ind = unique(allactrxn);
KIact = newKI(sub2ind(size(newKI),allactmetab,allactrxn));
%Identify Inhibited reactions
[allihbmetab,allihbrxn] = find(model.SI(:,1:nt_rxn)<0);
Vihb_ind = unique(allihbrxn);
KIihb = newKI(sub2ind(size(newKI),allihbmetab,allihbrxn));

%K and KI are written as vectors as opposed to matrices
parameter = struct();
model_data.Enzyme = model.EnzName;
model_data.S = newS;
model_data.SI = newSI;
model_data.Kcat = model.Kcat;
model_data.Vss = newVss;
model_data.Vind = 1:n_rxn;  
model_data.Vact_ind = Vact_ind;
model_data.Vihb_ind = Vihb_ind;
model_data.Vic_exind = n_rxn+1:n_rxn+nint_exrxn;
if ~isempty(bm_ind)
    model_data.Vxc_exind = n_rxn+nint_exrxn+1:nt_rxn-1;
    model_data.bm_ind = nt_rxn;
    model_data.Vind = model_data.Vind(model_data.Vind ~= bm_ind);
    model_data.Vic_exind = model_data.Vic_exind(model_data.Vic_exind ~= bm_ind);
    model_data.Vxc_exind = model_data.Vxc_exind(model_data.Vxc_exind ~= bm_ind);
else
    model_data.bm_ind = [];
    model_data.Vxc_exind = n_rxn+nint_exrxn+1:nt_rxn;
end
model_data.delSGr = delSGr;
model_data.Keq = newKeq;
model_data.n_rxn = n_rxn;
model_data.nt_metab = nt_metab;
model_data.next_metab = length(find(exter_mind));
model_data.nint_metab = length(find(~exter_mind));
[Krow,Kcol] = find(newK);
parameter.K = newK(sub2ind(size(newK),Krow,Kcol));
parameter.KI = parameter_vector(newKI,nt_rxn);
parameter.KIact = KIact;
parameter.KIihb = KIihb;
parameter.Vmax = model.Vmax;

% Reading in the concentration for each metabolite
metabname = C{14}(~cellfun('isempty',C{14}));%Metabolite Name
concLow = C{15}(1:length(metabname));%Metabolite concentration
concHigh = C{16}(1:length(metabname));
model_data.MClow = zeros(nt_metab,1);
model_data.MChigh = zeros(nt_metab,1);
for imc = 1:length(metabname)
    mtf = strcmp(metabname{imc},model_data.Metabolite);
    if any(mtf) 
        if ~isnan(concLow(imc))
        model_data.MClow(mtf) = concLow(imc);
        model_data.MChigh(mtf) = concHigh(imc);
        else
            model_data.MClow(mtf) = 0.01;%Randon Concentration for id purposes
            model_data.MChigh(mtf) = 100;
        end
    end
end
%if runFBA
    %build FBA matrices
    %set flux bounds
    %set uptake rates
    %run FBA
    %obtain ss fluxes
%end

variable = struct();
% variable.MC = model.MC;
variable.EC = model.EC;

% nested functions
function [model] = ident_regulator(model,reg_string,reg_stoich)%pass par as argument
    %KI to added 
    compos = strfind(reg_string,','); 
    regterms = cell(length(compos)+1,1); 
    if ~isemptyr(compos)
        for icompos = 1:length(compos) 
            if icompos == 1
                regterms{icompos} = reg_string(1:compos(icompos)-1);
            else
                regterms{icompos} =...
                reg_string(compos(icompos-1)+1:compos(icompos)-1); 
            end
        end
        regterms{icompos+1} = reg_string(compos(icompos)+1:end);
    else
        regterms{1} = reg_string(1:end);
    end    
    nterms = length(regterms);
    
    %->Assign default parameters 
    if isempty(par) 
        par = defparval(nterms);
    elseif length(par) <= ireg
        par = defparval(nterms,par);
    end
        
    iregterm = 1;    
    while iregterm <= nterms
        [mech,mechx] = regexp(regterms{iregterm},'(\w+.?)\((\w+.?)\)+','tokens','split');
        mechx = mechx(~cellfun('isempty',mechx));
        if ~isempty(mechx)
            newterms = regexp(mechx{1},'(\w+.?)+','tokens');
            mech = [mech,newterms];
        end
        if iscell(mech{1})
            mech = mech{1};
        end
         metabindx = strcmp(mech{1},model.Metabolite);            
            if any(metabindx)
                model.SI(metabindx,irxn) = reg_stoich;
                if ~isempty(par)
                    model.KI(metabindx,irxn) = par(ireg+iregterm);
                end
                if length(mech) < 2%no mechanism specified
                    [model] = reg_type('O',[find(metabindx);irxn],model);                        
                else
                    [model] = reg_type(mech{2},[find(metabindx);irxn],model);
                end
            else
                model.SI(imetab,irxn) = reg_stoich;
                if ~isempty(par)
                    model.KI(imetab,irxn) = par(ireg+iregterm);
                end
                model.Metabolite{imetab} = mech{1};
                if length(mech) < 2%no mechanism specified
                    [model] = reg_type('O',[imetab;irxn],model);                        
                else
                    [model] = reg_type(mech{imech}{2},[imetab;irxn],model);
                end                    
                imetab = imetab + 1;
            end                           
        iregterm = iregterm + 1;
    end  
    ireg = ireg + iregterm - 1;   
end

function [par] = defparval(nterms,par)
    if nargin < 2
      par = zeros(nterms,1);
    else
      par = [par;zeros(nterms,1)];
    end
    par(par == 0) = 10;
end

function temp_param = parameter_vector(matrix,nbasis)
%convert coefficients & srates into a single vector of
%parameters
    temp_param = [];
    for ibasis = 1:nbasis
        vec = matrix(:,ibasis);
        vec = vec(vec>0);        
        temp_param = [temp_param;vec];
    end
end

function [parameter] = extract_par(par_string)
    %separate terms into a vector
    if ~isempty(par_string)
        par_string = strtrim(strrep(par_string,'"',''));        
        parpos = strfind(par_string,',');
        parameter = zeros(length(parpos)+1,1);
        if ~isempty(parpos)
            ipar = 1;
            while ipar <= length(parpos)
                if ipar == 1
                    parameter(ipar) =...
                    str2double(strtrim(par_string(1:parpos(ipar)-1)));
                else
                    parameter(ipar) =...
                    str2double(strtrim(par_string(parpos(ipar-1)+1:parpos(ipar)-1)));
                end
                ipar = ipar + 1;
            end
            parameter(ipar) =...
            str2double(strtrim(par_string(parpos(ipar-1)+1:end)));
        else
            parameter(1) = str2double(strtrim(par_string(1:end)));
        end
    else
        parameter = [];
        %Default coefficients are defined within respective modules        
    end
end

function [model] = reg_type(mechanism,index,model)
    switch mechanism
        case 'A'
            model.SItype(index(1),index(2)) = 1;                    
        case 'C'
            model.SItype(index(1),index(2)) = 2;
        case 'U'
            model.SItype(index(1),index(2)) = 3;
        case 'N'
            model.SItype(index(1),index(2)) = 4;
        otherwise
            model.SItype(index(1),index(2)) = 5;
    end
end

end