% globalSens(model,nsampl,parName,parScale)
model = trnmodel;
nsampl = 1000;
parScale = [1e-4 20;...
            500 50000;...
            0.01 1;...
            0 0;...
            0 0;...
            0.1 1.0;...
            0.005 0.5];
parList = {'Coefficient','brate','ptrate','Kb','Kub','gmax','Vuptake'};
[model.Coefficient,model.brate] = parameter_return(model.allpar,model);
%Coefficient
[ngene,nreg] = size(model.RS);
[cr,cc] = find(model.Coefficient);
cf_ind = sub2ind(size(model.Coefficient),cr,cc);
ncoeff = length(cf_ind);
ceffind = 1:ncoeff;
% Coeff = sparse(ngene,nreg,1,cr,cc);
%Basal rate
nbr = size(model.RS,1);
brind = (1:nbr)+ncoeff;
%Translation
[tr,tc] = find(model.trate);
tr_ind = sub2ind(size(model.ptrate),tr,tc);
ntr = length(tr_ind);
trind = (1:ntr)+ncoeff+nbr;
% pTrate = sparse(nreg,ngene,1,tr,tc);
%binding & Unbinding
nub = length(find(model.Kub));
nubind = (1:nub)+ncoeff+nbr+ntr;
nb = length(find(model.Kb));
nbind = (1:nb)+ncoeff+nbr+ntr+nub;
%Inputs 
ninputs = 2;
inpind = (1:ninputs)+ncoeff+nbr+ntr+nub+nb;

Ns = ncoeff+nbr+ntr+nub+nb+ninputs;

pScale = zeros(Ns,2);
pScale(ceffind,:) = repmat(parScale(1,:),length(ceffind),1);
pScale(brind,[1,2]) = repmat(parScale(2,:),length(brind),1);
pScale(trind,[1,2]) = repmat(parScale(3,:),length(trind),1);
pScale(nbind,[1,2]) = repmat(parScale(4,:),length(nbind),1);
pScale(nubind,[1,2]) = repmat(parScale(5,:),length(nubind),1);
pScale(inpind(1),[1,2]) = parScale(6,:);
pScale(inpind(2),[1,2]) = parScale(7,:);


pScale_lw = repmat(pScale(:,1),2,1)';
pScale_up = repmat(pScale(:,2),2,1)';
pScale_lw = repmat(pScale_lw,1000,1);
pScale_up = repmat(pScale_up,1000,1);

pd = makedist('Uniform');
pSample = random(pd,nsampl,2*Ns);
parSampl = pScale_lw + (pScale_up - pScale_lw).*random(pd,nsampl,2*Ns);

Amat = parSampl(:,1:Ns);
Bmat = parSampl(:,Ns+1:2*Ns);
C = cell(Ns,1);
for ic = 1:Ns
    Cmat = Bmat;
    Cmat(:,ic) = Amat(:,ic);
    C{ic} = Cmat;
end
%Assign parameters from matrices for model computation
%Each column of each matrix is new set of parameters
varname = {'A';'P';'P4';'P1';'P1-A';'P4-P'};  
%For Amat
for jsampl = 1:nsampl
    ndynsample = 10;%Number of dynamic perturbation simulations
    model.Coefficient(cf_ind) = Amat(jsampl,ceffind);
    model.brate(1:ngene) = Amat(jsampl,brind);
    model.ptrate(tr_ind) = Amat(jsampl,trind);
    model.Kb(model.Kb~=0) = Amat(jsampl,nbind);
    model.Kub(model.Kub~=0) = Amat(jsampl,nubind);
    model.gmax = Amat(jsampl,inpind(1));
    model.Vuptake = Amat(jsampl,inpind(2));    
    model.allpar = parameter_vector(model,length(model.Gene));
    %Simulate Model
    initSolution = struct([]);
    [allSolution,yAconc,petconc,Aflux] =...
    MCdynamic(model,FBAmodel,defparval,ng,varname,ndynsample,initSolution);
end
%for Bmat
for jsampl = 1:nsampl
    ndynsample = 10;%Number of dynamic perturbation simulations
    model.Coefficient(cf_ind) = Bmat(jsampl,ceffind);
    model.brate(1:ngene) = Bmat(jsampl,brind);
    model.ptrate(tr_ind) = Bmat(jsampl,trind);
    model.Kb(model.Kb~=0) = Bmat(jsampl,nbind);
    model.Kub(model.Kub~=0) = Bmat(jsampl,nubind);
    model.gmax = Bmat(jsampl,inpind(1));
    model.Vuptake = Bmat(jsampl,inpind(2));    
    model.allpar = parameter_vector(model,length(model.Gene));
    %Simulate Model
    initSolution = struct([]);
    [allSolution,yBconc,petconc,Bflux] =...
    MCdynamic(model,FBAmodel,defparval,ng,varname,ndynsample,initSolution);
    yB(jsampl
end
%For C
for j = 1:Ns
    Cmat = C{j};
    for jsampl = 1:nsampl
        ndynsample = 10;%Number of dynamic perturbation simulations
        model.Coefficient(cf_ind) = Cmat(jsampl,ceffind);
        model.brate(1:ngene) = Cmat(jsampl,brind);
        model.ptrate(tr_ind) = Cmat(jsampl,trind);
        model.Kb(model.Kb~=0) = Cmat(jsampl,nbind);
        model.Kub(model.Kub~=0) = Cmat(jsampl,nubind);
        model.gmax = Cmat(jsampl,inpind(1));
        model.Vuptake = Cmat(jsampl,inpind(2));    
        model.allpar = parameter_vector(model,length(model.Gene));
        %Simulate Model
        initSolution = struct([]);
        [allSolution,YCconc,petconc,Cflux] =...
        MCdynamic(model,FBAmodel,defparval,ng,varname,ndynsample,initSolution);
    end
    S(j) = yAConc.*
end







