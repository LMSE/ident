%creating a subsytem of genes and/or TFs for evaluation disregarding the
%entire system/network
function newfunction(trnmodel,regprotein)
Protein = trnmodel.Protein;
Metabolite = trnmodel.Metabolite;
% metabpos = length(regprotein)+(1:length(Metabolite));

gene = {'aceA'};
newregprot = {};
rgene = {};
rprotein = {};
% regprot = 1:length(regprotein);
% metabprot = length(regprotein) + (1:(length(Protein)-length(regprotein)));

for ig = 1:length(gene)    
    genetf = strcmp(gene{ig},trnmodel.Gene);
    recursive_func(genetf);     
end
gene = [gene;rgene];

for iprot = 1:length(rprotein)
    prot_tf = strcmp(rprotein{iprot},regprotein);
    if any(prot_tf)
        newregprot = [newregprot;rprotein{iprot}];
    end
end

newg_count = length(gene);
newp_count = length(rprotein);

newmodel = struct();
newmodel.Gene = cell(newg_count,1);
newmodel.GeneRules = cell(newg_count,1);
newmodel.Protein = cell(newp_count,1);
newmodel.RS = sparse(newg_count,newp_count);
newmodel.Coefficient = sparse(newg_count,newp_count);
newmodel.trate = sparse(length(newregprot),newg_count);
newmodel.srate = sparse(newg_count,newp_count);
newmodel.Kmax = sparse(length(rprotein),length(Metabolite));


for ig = 1:length(gene)
    gtf = strcmp(gene{ig},trnmodel.Gene);
    if any(gtf)
        newmodel.Gene{ig} = gene{ig};
        newmodel.GeneRules{ig} = trnmodel.GeneRules{logical(gtf)};        
        for ip = 1:length(rprotein)
            ptf = strcmp(rprotein{ip},trnmodel.Protein);
            if any(ptf)
                newmodel.Protein{ip} = rprotein{ip};
                if logical(trnmodel.RS(gtf,ptf))
                    newmodel.RS(ig,ip) = trnmodel.RS(gtf,ptf);
                end
                if logical(trnmodel.Coefficient(gtf,ptf))
                    newmodel.Coefficient(ig,ip) = trnmodel.Coefficient(gtf,ptf);
                end
                if logical(trnmodel.srate(gtf,ptf))
                    newmodel.srate(ig,ip) = trnmodel.srate(gtf,ptf);
                end
                prtf = strcmp(rprotein{ip},regprotein);
                if logical(trnmodel.trate(prtf,gtf))
                    new_prtf = strcmp(rprotein{ip},newregprot);
                    newmodel.trate(new_prtf,ig) = trnmodel.trate(prtf,gtf);
                end
                if logical(trnmodel.Kmax(ptf,:))
                    newmodel.Kmax(ip,:) = trnmodel.Kmax(ptf,:);
                end
            end
        end
    end
end             
    




function recursive_func(indx)                    
    regindx = trnmodel.RS(logical(indx),:);
    reg = trnmodel.Protein(logical(regindx));
    for ireg = 1:length(reg)
        regprot_tf = strcmp(reg{ireg},regprotein);
        if any(regprot_tf)
            prot_gindx = trnmodel.trate(regprot_tf,:);
            rgtf = strcmp(trnmodel.Gene{logical(prot_gindx)},rgene);
            if ~any(rgtf)
                rgene = [rgene;trnmodel.Gene{logical(prot_gindx)}];
                recursive_func(prot_gindx);
            end
        else            
            metabprot_tf = strcmp(reg{ireg},Protein);
            if any(metabprot_tf)
                if ~any(strcmp(Protein{logical(metabprot_tf)},rprotein))
                    rprotein = [rprotein;Protein{logical(metabprot_tf)}];
                end
            end
        end
        if ~any(strcmp(reg{ireg},rprotein));
            rprotein = [rprotein;reg{ireg}];
        end
    end       
end
end


       
        
