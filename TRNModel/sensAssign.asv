function [model,flag] = sensAssign(model,parName,pScale,pVal,jsampl,savesimp)
%Simulate Model for revised parameters 
flag = 0;
Ns = size(parName,1);
if nargin < 6
    savesimp = cell(Ns,4);
end
if isfield(model,'Vuptake')
    model = rmfield(model,'Vuptake');
end
if isfield(model,'gmax')
    model = rmfield(model,'gmax');
end
parList = {'Kcat','K','KIact','KIihb','ptrate','Kb','Kub','Coefficient','brate','gmax'};
if ~isempty(parName)
    [model.Coefficient,model.brate] = parameter_return(model.allpar,model);
    pmeter = model.pmeter;  
    for ip = 1:Ns
        tf_par = strcmpi(parName{ip,1},parList);
        if any(tf_par)                      
            tf_gen = strcmpi(parName{ip,2},model.Gene);
            tf_prot = strcmpi(parName{ip,3},model.Enzyme);
            tf_reg = strcmpi(parName{ip,3},model.Regulators);
            tf_met = strcmpi(parName{ip,4},model.Metabolites);             
            %Select the switched parameter
            if find(tf_par) == 1
                model.Kcat(:) = pVal(jsampl);
            elseif find(tf_par) >=2 && find(tf_par) <= 4              
                if any(tf_prot) && any(tf_met)                    
                    pmeter.(parName{ip,1})(tf_met,tf_prot) = pVal(jsampl);
                end               
            elseif find(tf_par) > 4
                switch parName{ip,1}                             
                    case 'ptrate'
                        if any(tf_reg) && any(tf_gen)
                            model.ptrate(tf_reg,tf_gen) = pVal(jsampl);
                        end
                    case 'Kb'
                        if any(tf_reg)
                            model.Kub(tf_reg) = pVal(jsampl);
                        end
                    case 'Kub'
                        if any(tf_reg)
                            model.Kub(tf_reg) = pVal(jsampl);
                        end
                    case 'Coefficient'
                        if any(tf_gen) && any(tf_reg)                        
                            model.(parName{ip,1})(tf_gen,tf_reg) = pVal(jsampl);
                        end                    
                    case 'brate'
                        if any(tf_gen)
                            model.brate(tf_gen) = pVal(jsampl);
                        end
                    case 'gmax'
                        model.gmax = pVal(jsampl);                    
                end                   
            end
            model.allpar = parameter_vector(model,length(model.Gene));
            model.pmeter = pmeter;
            savesimp{ip,1} = parName{ip,1};
            savesimp{ip,2} = pScale(ip,1);
            savesimp{ip,3} = pScale(ip,2);   
            savesimp{ip,4}(jsamp) = parVal(jsampl);
            flag = 1;
        else
            fprintf('Parameter(s) %s is non-Existent',parName{ip,1});
        end
    end
end
return           
    