% function [Solution,status,indx,nfcall,totaltfinish,itime] =...
%   test5(trnmodel,defparval,ngene,tnreg,ngap,InConc,tmax,scalAbsTol,initval,tout)
%**************************************************************************
%Wrapper to solve ODE model using SUNDIALS
%December 2013 - version 4.0
%March 24 2014
%Changed from non-stiff to a stiff solver to test for v6 of
%singlepromoteractivity.m
%April 01 2014 - Renamed to solveODE from test5
%**************************************************************************
function [Sol,status,indx,nfcall,tfinish] =...
    solveODE(initval,defparval,ng,model,FBAmodel,Options)   

indx = 0;
nvar = length(initval);
if nargin < 5
    Options = struct();
    %Options.tmax = 8000;    
    Options.scalAbsTol = 1e-7;
    Options.RelTol = 1e-8;
    Options.MaxIter = 1000;
    Options.MaxDataPoints = 200;
elseif nargin >= 5
    if ~isfield(Options,'tout')
        Options.tout = 0.01;
    end
    if ~isfield(Options,'tmax')
        Options.tmax = 10;%h
    end
    if ~isfield(Options,'scalAbsTol')
        Options.scalAbsTol = 1e-7;
    end
    if ~isfield(Options,'RelTol')
        Options.RelTol = 1e-8;
    end
    if ~isfield(Options,'MaxIter')
        Options.MaxIter = 1000;
    end  
    if ~isfield(Options,'MaxDataPoints')
        Options.MaxDataPoints = 200;
    end
end

data = struct();
data.par = model.allpar;
data.ng = ng;%[ngene;nprot;nregp;nrecp;nmetab];
data.pdecay = defparval.pdecay;
data.mdecay = defparval.mdecay;
data.rephill = defparval.rephill;
data.ext_MC = model.ext_MC;
data.flux = model.Vss;
data.kcat = model.kcat;
data.Vuptake = model.Vuptake;
data.Vefflux = model.Vefflux;
model = rmfield(model,'ext_MC');
model = rmfield(model,'Vuptake');
model = rmfield(model,'Vefflux');
data.MC = initval(ng(1)+ng(2)+1:ng(1)+ng(2)+ng(3));
data.Yref = model.Yref;
%Set ScalAbsTol
t0 = 0.0;
AbsTol = zeros(nvar,1);
AbsTol(1:ng(1)) = Options.RabsTol;
AbsTol(ng(1)+1:ng(1)+ng(2)) = Options.PabsTol;
AbsTol(ng(1)+ng(2)+1:end) = Options.MabsTol;
AbsTol(AbsTol==0) = Options.MabsTol;

%Initialize CVode
tstart = tic;
options = CVodeSetOptions('UserData',data,...                                                    
                          'RelTol',Options.RelTol,...
                          'AbsTol',AbsTol,...
                          'MaxNumSteps',Options.MaxIter);                             
% mondata.sol = false;
% mondata.select = find(indx);
mondata.mode = 'text';
mondata.updt = 100;
mondata.skip = 10;

%Using SUNDIALS provided monitor function  
options = CVodeSetOptions(options,'MonitorFn',@CVodeMonitor,...
                          'MonitorData',mondata);                      
%ODE Function Called through Anonymous function                      
callmatbalance = @(t,Y,data)integrated_ODEmodel(t,Y,data,model,FBAmodel); 
%Stiff Solver and Method
CVodeInit(callmatbalance,'BDF','Newton',t0,initval,options);

%=======================
%FSA Initialization
%=======================

% N = ng(1)+ng(3);
% Ns = 2;%92 x 38
% YS0 = zeros(N,Ns);
% ParamList = [1 3];
% ParamScal = zeros(1,Ns);
% ParamScal(ParamScal == 0) = 1e-4;

% FSAoptions = CVodeSensSetOptions('method','Simultaneous',...
%                                  'ParamField','pr',...
%                                  'ParamList',ParamList,...
%                                  'ParamScales',ParamScal,...
%                                  'ErrControl',true,...
%                                  'DQType','Forward');

% CVodeSensInit(Ns,[],YS0,FSAoptions);   

Sol.t = [];
Sol.y = [];
Sol.ys = [];
nfcall = 0;

starttime = Options.tout;
endtime = Options.tmax;
maxdata = Options.MaxDataPoints;

itime = [];
tout = starttime:endtime/(maxdata-1):endtime;

for ktime = 1:length(tout)
    itstart = tic;
    [status,t,dY] = CVode(tout(ktime),'Normal');
    if status < 0
        tfinish = toc(
    stats = CVodeGetStats;
    %Collect Solution
    Sol.t = [Sol.t;tout(ktime)];
    Sol.y = [Sol.y, dY];
    %Solution.ys = [Solution.ys, YS];
    itfinish = toc(itstart);
    itime = [itime;itfinish];
end
stats = CVodeGetStats;
EWT = CVodeGet('ErrorWeights');
CVodeFree;
tfinish = toc(tstart);                          
end
