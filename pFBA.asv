function pFBA(model)
%call solveLP to obtain new model structure
%Uptake Flux
bounds.Vuptake = model.Vuptake;
bounds.vl = zeros(model.nt_rxn,1);
% bounds.vl(bounds.vl==0) = -1;
bounds.vl(logical(model.rev)) = -100;%bounds.Vuptake;
bounds.vu = zeros(model.nt_rxn,1);          
%Corresponding flux bounds
bounds.vu(bounds.vu==0) = 100;%bounds.Vuptake;
[~,~,~,~,~,~,model] = solveLP(model,bounds,model.bmrxn);

%call CONRA pFBA
model.lb = model.vl;
model.ub = model.vu;


%reduce sum of all fluxes - pFBA
%convert to irreversible model
modelIrrev = convertIrreversible(model);

%add meatabolite to S
modelIrrev.S(end+1,:) = ones(size(modelIrrev.S(1,:)));
modelIrrev.b(end+1) = 0;
modelIrrev.mets{end+1} = 'fluxMeasure';

nm = size(modelIrrev.mets,1);
%add reaction to S matrix
modelIrrev.S(:,end+1) = sparse(find(strcmpi('fluxMeasure',modelIrrev.mets)),1,-1,nm,1);
modelIrrev.rxns{end+1} = 'netFlux';
modelIrrev.vl(end+1) = 0;
modelIrrev.vu(end+1) = Inf;
modelIrrev.rev(end+1) = 0;

prxnid = find(strcmpi('netFlux',modelIrrev.rxns));
bounds.vl = modelIrrev.vl;
bounds.vu = modelIrrev.vu;

[~,~,vProdLPmin,vLPmin] = solveLP(modelIrrev,bounds,prxnid);
modelIrrev.vl(prxnid) = vProdLPmin;
modelIrrev.vu(prxnid) = vProdLPmin;
bounds.vl = modelIrrev.vl;
bounds.vu = modelIrrev.vu;

[vProdLPmax,vLPmax] = solveLP(modelIrrev,bounds,model.bmrxn);


